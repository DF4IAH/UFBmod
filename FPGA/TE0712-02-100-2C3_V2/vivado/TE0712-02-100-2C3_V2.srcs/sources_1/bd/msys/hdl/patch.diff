--- msys_wrapper.vhd.orig	2020-08-05 03:05:15.865146600 +0200
+++ msys_wrapper.vhd	2020-08-05 03:04:02.334451500 +0200
@@ -2,5 +2,5 @@
 ----------------------------------------------------------------------------------
 --Tool Version: Vivado v.2020.1 (win64) Build 2902540 Wed May 27 19:54:49 MDT 2020
---Date        : Wed Aug  5 03:05:15 2020
+--Date        : Wed Aug  5 01:35:45 2020
 --Host        : ULRICHHABEL6701 running 64-bit major release  (build 9200)
 --Command     : generate_target msys_wrapper.bd
@@ -16,4 +16,6 @@
     BOARD_IIC_scl_io : inout STD_LOGIC;
     BOARD_IIC_sda_io : inout STD_LOGIC;
+    BOARD_ROTENC_I : in STD_LOGIC;
+    BOARD_ROTENC_Q : in STD_LOGIC;
     BOARD_ROTENC_PUSH : in STD_LOGIC;
     CLK0_clk_n : in STD_LOGIC_VECTOR ( 0 to 0 );
@@ -42,12 +44,8 @@
     ETH0_DA_G : out STD_LOGIC_VECTOR ( 0 to 0 );
     ETH0_DA_Y : out STD_LOGIC_VECTOR ( 0 to 0 );
-    ETH0_LINK_LED_g : in STD_LOGIC;
+    ETH0_LINK_LED : in STD_LOGIC;
     ETH0_MDIO_MDC_mdc : out STD_LOGIC;
     ETH0_MDIO_MDC_mdio_io : inout STD_LOGIC;
-    EUI48_FSM_run : in STD_LOGIC;
-    EUI48_FSM_start : out STD_LOGIC_VECTOR ( 0 to 0 );
-    EUI48_abort : in STD_LOGIC_VECTOR ( 7 downto 0 );
-    EUI48_data : in STD_LOGIC_VECTOR ( 47 downto 0 );
-    EUI48_state : in STD_LOGIC_VECTOR ( 7 downto 0 );
+    EUI48_onewire_io : inout STD_LOGIC;
     FPGA_IO : in STD_LOGIC;
     LCD_BL : out STD_LOGIC_VECTOR ( 0 to 0 );
@@ -63,17 +61,4 @@
     RMII_PHY_M_0_tx_en : out STD_LOGIC;
     RMII_PHY_M_0_txd : out STD_LOGIC_VECTOR ( 1 downto 0 );
-    SCOPE_FSM_FIFO_RdEmpty : out STD_LOGIC;
-    SCOPE_FSM_FIFO_RdEn : in STD_LOGIC;
-    SCOPE_FSM_FIFO_RdValid : out STD_LOGIC;
-    SCOPE_FSM_FIFO_Rst : in STD_LOGIC;
-    SCOPE_FSM_FIFO_WrEn : in STD_LOGIC;
-    SCOPE_FSM_FIFO_WrFull : out STD_LOGIC;
-    SCOPE_FSM_FIFO_rd_rst_busy : out STD_LOGIC;
-    SCOPE_FSM_FIFO_wr_rst_busy : out STD_LOGIC;
-    SCOPE_FSM_GPIO0_Out : out STD_LOGIC_VECTOR ( 31 downto 0 );
-    SCOPE_FSM_GPIO1_In : in STD_LOGIC_VECTOR ( 31 downto 0 );
-    SCOPE_FSM_Timebase_CE : in STD_LOGIC;
-    SCOPE_FSM_Timebase_SCLR : in STD_LOGIC;
-    SCOPE_FSM_TrigSrc : out STD_LOGIC_VECTOR ( 47 downto 0 );
     TRX_PLL_clk_25MHz_N : out STD_LOGIC_VECTOR ( 0 to 0 );
     TRX_PLL_clk_25MHz_P : out STD_LOGIC_VECTOR ( 0 to 0 );
@@ -82,8 +67,4 @@
     TRX_reset : out STD_LOGIC_VECTOR ( 0 to 0 );
     TRX_rfx_mode : out STD_LOGIC_VECTOR ( 0 to 0 );
-    TRX_rx09_fifo_o : out STD_LOGIC_VECTOR ( 31 downto 0 );
-    TRX_rx09_fifo_valid_o : out STD_LOGIC;
-    TRX_rx24_fifo_o : out STD_LOGIC_VECTOR ( 31 downto 0 );
-    TRX_rx24_fifo_valid_o : out STD_LOGIC;
     TRX_rx_clk_64MHz_clk_n : in STD_LOGIC;
     TRX_rx_clk_64MHz_clk_p : in STD_LOGIC;
@@ -110,78 +91,5 @@
     ULI_SYSTEM_XIO : in STD_LOGIC;
     USER_dbg_out : out STD_LOGIC_VECTOR ( 13 downto 0 );
-    el_S_AXI_araddr : out STD_LOGIC_VECTOR ( 31 downto 0 );
-    el_S_AXI_arburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
-    el_S_AXI_arcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_S_AXI_arlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
-    el_S_AXI_arlock : out STD_LOGIC_VECTOR ( 0 to 0 );
-    el_S_AXI_arprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
-    el_S_AXI_arqos : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_S_AXI_arready : in STD_LOGIC;
-    el_S_AXI_arregion : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_S_AXI_arsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
-    el_S_AXI_arvalid : out STD_LOGIC;
-    el_S_AXI_awaddr : out STD_LOGIC_VECTOR ( 31 downto 0 );
-    el_S_AXI_awburst : out STD_LOGIC_VECTOR ( 1 downto 0 );
-    el_S_AXI_awcache : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_S_AXI_awlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
-    el_S_AXI_awlock : out STD_LOGIC_VECTOR ( 0 to 0 );
-    el_S_AXI_awprot : out STD_LOGIC_VECTOR ( 2 downto 0 );
-    el_S_AXI_awqos : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_S_AXI_awready : in STD_LOGIC;
-    el_S_AXI_awregion : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_S_AXI_awsize : out STD_LOGIC_VECTOR ( 2 downto 0 );
-    el_S_AXI_awvalid : out STD_LOGIC;
-    el_S_AXI_bready : out STD_LOGIC;
-    el_S_AXI_bresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
-    el_S_AXI_bvalid : in STD_LOGIC;
-    el_S_AXI_rdata : in STD_LOGIC_VECTOR ( 31 downto 0 );
-    el_S_AXI_rlast : in STD_LOGIC;
-    el_S_AXI_rready : out STD_LOGIC;
-    el_S_AXI_rresp : in STD_LOGIC_VECTOR ( 1 downto 0 );
-    el_S_AXI_rvalid : in STD_LOGIC;
-    el_S_AXI_wdata : out STD_LOGIC_VECTOR ( 31 downto 0 );
-    el_S_AXI_wlast : out STD_LOGIC;
-    el_S_AXI_wready : in STD_LOGIC;
-    el_S_AXI_wstrb : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_S_AXI_wvalid : out STD_LOGIC;
-    el_ip2intc_irpt : in STD_LOGIC;
-    el_phy_col : out STD_LOGIC;
-    el_phy_crs : out STD_LOGIC;
-    el_phy_dv : out STD_LOGIC;
-    el_phy_mdc : in STD_LOGIC;
-    el_phy_mdio_i : out STD_LOGIC_VECTOR ( 0 to 0 );
-    el_phy_mdio_o : in STD_LOGIC;
-    el_phy_mdio_t : in STD_LOGIC;
-    el_phy_rst_n : in STD_LOGIC;
-    el_phy_rx_clk : out STD_LOGIC;
-    el_phy_rx_data : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_phy_rx_er : out STD_LOGIC;
-    el_phy_tx_clk : out STD_LOGIC;
-    el_phy_tx_data : in STD_LOGIC_VECTOR ( 3 downto 0 );
-    el_phy_tx_en : in STD_LOGIC;
-    fft09_aresetn_in : in STD_LOGIC;
-    fft09_config_tdata_in : in STD_LOGIC_VECTOR ( 7 downto 0 );
-    fft09_config_tvalid_in : in STD_LOGIC;
-    fft09_data_tlast_in : in STD_LOGIC;
-    fft09_data_tready_out : out STD_LOGIC;
-    fft09_data_tvalid_in : in STD_LOGIC;
-    fft24_aresetn_in : in STD_LOGIC;
-    fft24_config_tdata_in : in STD_LOGIC_VECTOR ( 7 downto 0 );
-    fft24_config_tvalid_in : in STD_LOGIC;
-    fft24_data_tlast_in : in STD_LOGIC;
-    fft24_data_tready_out : out STD_LOGIC;
-    fft24_data_tvalid_in : in STD_LOGIC;
-    microblaze_0_Clk_100MHz_o : out STD_LOGIC;
     phy_rst_n : out STD_LOGIC;
-    premem_rx09_addra_in : in STD_LOGIC_VECTOR ( 10 downto 0 );
-    premem_rx09_addrb_in : in STD_LOGIC_VECTOR ( 10 downto 0 );
-    premem_rx09_dina_in : in STD_LOGIC_VECTOR ( 25 downto 0 );
-    premem_rx09_quarterfrm_in : in STD_LOGIC_VECTOR ( 2 downto 0 );
-    premem_rx09_wea_in : in STD_LOGIC_VECTOR ( 0 to 0 );
-    premem_rx24_addra_in : in STD_LOGIC_VECTOR ( 10 downto 0 );
-    premem_rx24_addrb_in : in STD_LOGIC_VECTOR ( 10 downto 0 );
-    premem_rx24_dina_in : in STD_LOGIC_VECTOR ( 25 downto 0 );
-    premem_rx24_quarterfrm_in : in STD_LOGIC_VECTOR ( 2 downto 0 );
-    premem_rx24_wea_in : in STD_LOGIC_VECTOR ( 0 to 0 );
     qspi_flash_io0_io : inout STD_LOGIC;
     qspi_flash_io1_io : inout STD_LOGIC;
@@ -189,8 +97,5 @@
     qspi_flash_io3_io : inout STD_LOGIC;
     qspi_flash_ss_io : inout STD_LOGIC;
-    reset : in STD_LOGIC;
-    rotenc_dec_cnt_en : in STD_LOGIC;
-    rotenc_dec_cnt_up_dwn : in STD_LOGIC;
-    rst_100M_peripheral_aresetn : out STD_LOGIC_VECTOR ( 0 to 0 )
+    reset : in STD_LOGIC
   );
 end msys_wrapper;
@@ -299,4 +204,41 @@
     el_phy_mdc : in STD_LOGIC;
     el_phy_mdio_i : out STD_LOGIC_VECTOR ( 0 to 0 );
+    qspi_flash_io0_i : in STD_LOGIC;
+    qspi_flash_io0_o : out STD_LOGIC;
+    qspi_flash_io0_t : out STD_LOGIC;
+    qspi_flash_io1_i : in STD_LOGIC;
+    qspi_flash_io1_o : out STD_LOGIC;
+    qspi_flash_io1_t : out STD_LOGIC;
+    qspi_flash_io2_i : in STD_LOGIC;
+    qspi_flash_io2_o : out STD_LOGIC;
+    qspi_flash_io2_t : out STD_LOGIC;
+    qspi_flash_io3_i : in STD_LOGIC;
+    qspi_flash_io3_o : out STD_LOGIC;
+    qspi_flash_io3_t : out STD_LOGIC;
+    qspi_flash_ss_i : in STD_LOGIC;
+    qspi_flash_ss_o : out STD_LOGIC;
+    qspi_flash_ss_t : out STD_LOGIC;
+    TRX_rx_clk_64MHz_clk_n : in STD_LOGIC;
+    TRX_rx_clk_64MHz_clk_p : in STD_LOGIC;
+    UART0_rxd : in STD_LOGIC;
+    UART0_txd : out STD_LOGIC;
+    CLK3_sys_diff_clk_p : in STD_LOGIC;
+    CLK3_sys_diff_clk_n : in STD_LOGIC;
+    CLK0_clk_p : in STD_LOGIC_VECTOR ( 0 to 0 );
+    CLK0_clk_n : in STD_LOGIC_VECTOR ( 0 to 0 );
+    RMII_PHY_M_0_crs_dv : in STD_LOGIC;
+    RMII_PHY_M_0_rxd : in STD_LOGIC_VECTOR ( 1 downto 0 );
+    RMII_PHY_M_0_tx_en : out STD_LOGIC;
+    RMII_PHY_M_0_txd : out STD_LOGIC_VECTOR ( 1 downto 0 );
+    BOARD_IIC_scl_i : in STD_LOGIC;
+    BOARD_IIC_scl_o : out STD_LOGIC;
+    BOARD_IIC_scl_t : out STD_LOGIC;
+    BOARD_IIC_sda_i : in STD_LOGIC;
+    BOARD_IIC_sda_o : out STD_LOGIC;
+    BOARD_IIC_sda_t : out STD_LOGIC;
+    ETH0_MDIO_MDC_mdc : out STD_LOGIC;
+    ETH0_MDIO_MDC_mdio_i : in STD_LOGIC;
+    ETH0_MDIO_MDC_mdio_o : out STD_LOGIC;
+    ETH0_MDIO_MDC_mdio_t : out STD_LOGIC;
     TRX_spi_io0_i : in STD_LOGIC;
     TRX_spi_io0_o : out STD_LOGIC;
@@ -311,19 +253,4 @@
     TRX_spi_ss_o : out STD_LOGIC_VECTOR ( 0 to 0 );
     TRX_spi_ss_t : out STD_LOGIC;
-    DDR3_SDRAM_dq : inout STD_LOGIC_VECTOR ( 31 downto 0 );
-    DDR3_SDRAM_dqs_p : inout STD_LOGIC_VECTOR ( 3 downto 0 );
-    DDR3_SDRAM_dqs_n : inout STD_LOGIC_VECTOR ( 3 downto 0 );
-    DDR3_SDRAM_addr : out STD_LOGIC_VECTOR ( 14 downto 0 );
-    DDR3_SDRAM_ba : out STD_LOGIC_VECTOR ( 2 downto 0 );
-    DDR3_SDRAM_ras_n : out STD_LOGIC;
-    DDR3_SDRAM_cas_n : out STD_LOGIC;
-    DDR3_SDRAM_we_n : out STD_LOGIC;
-    DDR3_SDRAM_reset_n : out STD_LOGIC;
-    DDR3_SDRAM_ck_p : out STD_LOGIC_VECTOR ( 0 to 0 );
-    DDR3_SDRAM_ck_n : out STD_LOGIC_VECTOR ( 0 to 0 );
-    DDR3_SDRAM_cke : out STD_LOGIC_VECTOR ( 0 to 0 );
-    DDR3_SDRAM_cs_n : out STD_LOGIC_VECTOR ( 0 to 0 );
-    DDR3_SDRAM_dm : out STD_LOGIC_VECTOR ( 3 downto 0 );
-    DDR3_SDRAM_odt : out STD_LOGIC_VECTOR ( 0 to 0 );
     el_S_AXI_awaddr : out STD_LOGIC_VECTOR ( 31 downto 0 );
     el_S_AXI_awlen : out STD_LOGIC_VECTOR ( 7 downto 0 );
@@ -361,45 +288,23 @@
     el_S_AXI_rvalid : in STD_LOGIC;
     el_S_AXI_rready : out STD_LOGIC;
-    TRX_tx_clk_clk_n : out STD_LOGIC;
-    TRX_tx_clk_clk_p : out STD_LOGIC;
+    DDR3_SDRAM_dq : inout STD_LOGIC_VECTOR ( 31 downto 0 );
+    DDR3_SDRAM_dqs_p : inout STD_LOGIC_VECTOR ( 3 downto 0 );
+    DDR3_SDRAM_dqs_n : inout STD_LOGIC_VECTOR ( 3 downto 0 );
+    DDR3_SDRAM_addr : out STD_LOGIC_VECTOR ( 14 downto 0 );
+    DDR3_SDRAM_ba : out STD_LOGIC_VECTOR ( 2 downto 0 );
+    DDR3_SDRAM_ras_n : out STD_LOGIC;
+    DDR3_SDRAM_cas_n : out STD_LOGIC;
+    DDR3_SDRAM_we_n : out STD_LOGIC;
+    DDR3_SDRAM_reset_n : out STD_LOGIC;
+    DDR3_SDRAM_ck_p : out STD_LOGIC_VECTOR ( 0 to 0 );
+    DDR3_SDRAM_ck_n : out STD_LOGIC_VECTOR ( 0 to 0 );
+    DDR3_SDRAM_cke : out STD_LOGIC_VECTOR ( 0 to 0 );
+    DDR3_SDRAM_cs_n : out STD_LOGIC_VECTOR ( 0 to 0 );
+    DDR3_SDRAM_dm : out STD_LOGIC_VECTOR ( 3 downto 0 );
+    DDR3_SDRAM_odt : out STD_LOGIC_VECTOR ( 0 to 0 );
     CLK2_mgt_clk0_clk_p : in STD_LOGIC;
     CLK2_mgt_clk0_clk_n : in STD_LOGIC;
-    qspi_flash_io0_i : in STD_LOGIC;
-    qspi_flash_io0_o : out STD_LOGIC;
-    qspi_flash_io0_t : out STD_LOGIC;
-    qspi_flash_io1_i : in STD_LOGIC;
-    qspi_flash_io1_o : out STD_LOGIC;
-    qspi_flash_io1_t : out STD_LOGIC;
-    qspi_flash_io2_i : in STD_LOGIC;
-    qspi_flash_io2_o : out STD_LOGIC;
-    qspi_flash_io2_t : out STD_LOGIC;
-    qspi_flash_io3_i : in STD_LOGIC;
-    qspi_flash_io3_o : out STD_LOGIC;
-    qspi_flash_io3_t : out STD_LOGIC;
-    qspi_flash_ss_i : in STD_LOGIC;
-    qspi_flash_ss_o : out STD_LOGIC;
-    qspi_flash_ss_t : out STD_LOGIC;
-    CLK3_sys_diff_clk_p : in STD_LOGIC;
-    CLK3_sys_diff_clk_n : in STD_LOGIC;
-    TRX_rx_clk_64MHz_clk_n : in STD_LOGIC;
-    TRX_rx_clk_64MHz_clk_p : in STD_LOGIC;
-    UART0_rxd : in STD_LOGIC;
-    UART0_txd : out STD_LOGIC;
-    CLK0_clk_p : in STD_LOGIC_VECTOR ( 0 to 0 );
-    CLK0_clk_n : in STD_LOGIC_VECTOR ( 0 to 0 );
-    RMII_PHY_M_0_crs_dv : in STD_LOGIC;
-    RMII_PHY_M_0_rxd : in STD_LOGIC_VECTOR ( 1 downto 0 );
-    RMII_PHY_M_0_tx_en : out STD_LOGIC;
-    RMII_PHY_M_0_txd : out STD_LOGIC_VECTOR ( 1 downto 0 );
-    ETH0_MDIO_MDC_mdc : out STD_LOGIC;
-    ETH0_MDIO_MDC_mdio_i : in STD_LOGIC;
-    ETH0_MDIO_MDC_mdio_o : out STD_LOGIC;
-    ETH0_MDIO_MDC_mdio_t : out STD_LOGIC;
-    BOARD_IIC_scl_i : in STD_LOGIC;
-    BOARD_IIC_scl_o : out STD_LOGIC;
-    BOARD_IIC_scl_t : out STD_LOGIC;
-    BOARD_IIC_sda_i : in STD_LOGIC;
-    BOARD_IIC_sda_o : out STD_LOGIC;
-    BOARD_IIC_sda_t : out STD_LOGIC
+    TRX_tx_clk_clk_n : out STD_LOGIC;
+    TRX_tx_clk_clk_p : out STD_LOGIC
   );
   end component msys;
@@ -412,4 +317,185 @@
   );
   end component IOBUF;
+  component rotenc_decoder is
+  port (
+    clk                 : in STD_LOGIC;
+    resetn              : in STD_LOGIC;
+    rotenc_I            : in STD_LOGIC;
+    rotenc_Q            : in STD_LOGIC;
+    cnt_up_dwn          : out STD_LOGIC;
+    cnt_en              : out STD_LOGIC
+  );
+  end component rotenc_decoder;
+  component auto_LVDS_rotate is
+  port (
+    resetn              : in  STD_LOGIC;
+    clk                 : in  STD_LOGIC;
+    LVDS09              : in  STD_LOGIC_VECTOR (31 downto 0);
+    LVDS09_valid        : in  STD_LOGIC;
+    LVDS24              : in  STD_LOGIC_VECTOR (31 downto 0);
+    LVDS24_valid        : in  STD_LOGIC;
+    rot09q              : out STD_LOGIC_VECTOR (31 downto 0);
+    rot09vld            : out STD_LOGIC;
+    rot24q              : out STD_LOGIC_VECTOR (31 downto 0);
+    rot24vld            : out STD_LOGIC
+  );
+  end component auto_LVDS_rotate;
+  component FFT_controller is
+  port (
+    -- All Clock Domain AXI 100 MHz
+    resetn                  : in  STD_LOGIC;
+    clk                     : in  STD_LOGIC;
+    
+    rx09_bs_32bits          : in  STD_LOGIC_VECTOR (31 downto 0);
+    rx09_bs_32bits_vld      : in  STD_LOGIC;
+
+    rx24_bs_32bits          : in  STD_LOGIC_VECTOR (31 downto 0);
+    rx24_bs_32bits_vld      : in  STD_LOGIC;
+    
+    PreMem09_addra          : out STD_LOGIC_VECTOR (10 downto 0);  -- (a)  2x FFT frame of 1024 points = 2048 addresses
+    PreMem09_wea            : out STD_LOGIC;
+    PreMem09_dina           : out STD_LOGIC_VECTOR (25 downto 0);  -- (b)  29..17: I-data, 13..01: Q-data
+    PreMem09_addrb          : out STD_LOGIC_VECTOR (10 downto 0);  -- see above (a)
+    PreMem09_quarterfrm     : out STD_LOGIC_VECTOR ( 2 downto 0);
+    
+    PreMem24_addra          : out STD_LOGIC_VECTOR (10 downto 0);  -- (a)  2x FFT frame of 1024 points = 2048 addresses
+    PreMem24_wea            : out STD_LOGIC;
+    PreMem24_dina           : out STD_LOGIC_VECTOR (25 downto 0);  -- see above (b)
+    PreMem24_addrb          : out STD_LOGIC_VECTOR (10 downto 0);  -- see above (a)
+    PreMem24_quarterfrm     : out STD_LOGIC_VECTOR ( 2 downto 0);
+    
+    XFFT09_aresetn          : out STD_LOGIC;
+    XFFT09_s_data_tlast     : out STD_LOGIC;
+    XFFT09_s_data_tready    : in  STD_LOGIC;
+    XFFT09_s_data_tvalid    : out STD_LOGIC;
+    XFFT09_s_conf_tdata     : out STD_LOGIC_VECTOR ( 7 downto 0);
+    XFFT09_s_conf_tvalid    : out STD_LOGIC;
+    
+    XFFT24_aresetn          : out STD_LOGIC;
+    XFFT24_s_data_tlast     : out STD_LOGIC;
+    XFFT24_s_data_tready    : in  STD_LOGIC;
+    XFFT24_s_data_tvalid    : out STD_LOGIC;
+    XFFT24_s_conf_tdata     : out STD_LOGIC_VECTOR ( 7 downto 0);
+    XFFT24_s_conf_tvalid    : out STD_LOGIC
+  );
+  end component FFT_controller;
+  component EUI48_FSM is 
+  port (
+    resetn                  : in  STD_LOGIC;
+    clk                     : in  STD_LOGIC;
+    EUI48_onewire_tri_i     : in  STD_LOGIC;
+    EUI48_onewire_tri_o     : out STD_LOGIC;
+    EUI48_onewire_tri_t     : out STD_LOGIC;
+    EUI48_FSM_start         : in  STD_LOGIC;
+    EUI48_FSM_run           : out STD_LOGIC;
+    EUI48_data              : out STD_LOGIC_VECTOR (47 downto 0);
+    EUI48_state             : out STD_LOGIC_VECTOR ( 7 downto 0);
+    EUI48_abort             : out STD_LOGIC_VECTOR ( 7 downto 0)
+  );
+  end component EUI48_FSM;
+  component SCOPE_FSM is
+  Port (
+    resetn                      : in  STD_LOGIC;
+    clk                         : in  STD_LOGIC;
+    SCOPE_FSM_GPIO0_Out         : in  STD_LOGIC_VECTOR (31 downto 0);
+    SCOPE_FSM_GPIO1_In          : out STD_LOGIC_VECTOR (31 downto 0);
+    SCOPE_FSM_TrigSrc           : in  STD_LOGIC_VECTOR (47 downto 0);
+    SCOPE_FSM_Timebase_CE       : out STD_LOGIC;
+    SCOPE_FSM_Timebase_SCLR     : out STD_LOGIC;
+    SCOPE_FSM_FIFO_Rstn         : out STD_LOGIC;
+    SCOPE_FSM_FIFO_wr_rst_busy  : in  STD_LOGIC;
+    SCOPE_FSM_FIFO_rd_rst_busy  : in  STD_LOGIC;
+    SCOPE_FSM_FIFO_WrFull       : in  STD_LOGIC;
+    SCOPE_FSM_FIFO_RdEmpty      : in  STD_LOGIC;
+    SCOPE_FSM_FIFO_WrEn         : out STD_LOGIC;
+    SCOPE_FSM_FIFO_RdEn         : out STD_LOGIC;
+    SCOPE_FSM_FIFO_RdValid      : in  STD_LOGIC
+  );
+  end component SCOPE_FSM;
+    component axi_ethernetlite is
+  Generic
+   (
+    C_FAMILY                        : string := "artix7";
+    C_SELECT_XPM                    : integer := 1;
+    C_INSTANCE                      : string := "axi_ethernetlite_inst";
+    C_S_AXI_ACLK_PERIOD_PS          : integer := 10000;
+    C_S_AXI_ADDR_WIDTH              : integer := 13;
+    C_S_AXI_DATA_WIDTH              : integer range 32 to 32 := 32;
+    C_S_AXI_ID_WIDTH                : integer := 1;
+    C_S_AXI_PROTOCOL                : string  := "AXI4LITE";
+
+    C_INCLUDE_MDIO                  : integer := 1;
+    C_INCLUDE_INTERNAL_LOOPBACK     : integer := 0;
+    C_INCLUDE_GLOBAL_BUFFERS        : integer := 1;
+    C_DUPLEX                        : integer range 0 to 1:= 1;
+    C_TX_PING_PONG                  : integer range 0 to 1:= 1;
+    C_RX_PING_PONG                  : integer range 0 to 1:= 1
+    );
+  Port (
+--  -- AXI Slave signals ------------------------------------------------------
+--   -- AXI Global System Signals
+       s_axi_aclk       : in  std_logic;
+       s_axi_aresetn    : in  std_logic;
+       ip2intc_irpt     : out std_logic;
+
+--   -- axi slave burst Interface
+--   -- axi write address Channel Signals
+       s_axi_awid    : in  std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_awaddr  : in  std_logic_vector(12 downto 0); -- (C_S_AXI_ADDR_WIDTH-1 downto 0);
+       s_axi_awlen   : in  std_logic_vector(7 downto 0);
+       s_axi_awsize  : in  std_logic_vector(2 downto 0);
+       s_axi_awburst : in  std_logic_vector(1 downto 0);
+       s_axi_awcache : in  std_logic_vector(3 downto 0);
+       s_axi_awvalid : in  std_logic;
+       s_axi_awready : out std_logic;
+
+--   -- axi write data Channel Signals
+       s_axi_wdata   : in  std_logic_vector(31 downto 0); -- (C_S_AXI_DATA_WIDTH-1 downto 0);
+       s_axi_wstrb   : in  std_logic_vector(3 downto 0);
+                               --(((C_S_AXI_DATA_WIDTH/8)-1) downto 0);
+       s_axi_wlast   : in  std_logic;
+       s_axi_wvalid  : in  std_logic;
+       s_axi_wready  : out std_logic;
+
+--   -- axi write response Channel Signals
+       s_axi_bid     : out std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_bresp   : out std_logic_vector(1 downto 0);
+       s_axi_bvalid  : out std_logic;
+       s_axi_bready  : in  std_logic;
+--   -- axi read address Channel Signals
+       s_axi_arid    : in  std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_araddr  : in  std_logic_vector(12 downto 0); -- (C_S_AXI_ADDR_WIDTH-1 downto 0);
+       s_axi_arlen   : in  std_logic_vector(7 downto 0);
+       s_axi_arsize  : in  std_logic_vector(2 downto 0);
+       s_axi_arburst : in  std_logic_vector(1 downto 0);
+       s_axi_arcache : in  std_logic_vector(3 downto 0);
+       s_axi_arvalid : in  std_logic;
+       s_axi_arready : out std_logic;
+
+--   -- axi read data Channel Signals
+       s_axi_rid     : out std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_rdata   : out std_logic_vector(31 downto 0); -- (C_S_AXI_DATA_WIDTH-1 downto 0);
+       s_axi_rresp   : out std_logic_vector(1 downto 0);
+       s_axi_rlast   : out std_logic;
+       s_axi_rvalid  : out std_logic;
+       s_axi_rready  : in  std_logic;
+
+--   -- Ethernet Interface
+       phy_tx_clk        : in std_logic;
+       phy_rx_clk        : in std_logic;
+       phy_crs           : in std_logic;
+       phy_dv            : in std_logic;
+       phy_rx_data       : in std_logic_vector (3 downto 0);
+       phy_col           : in std_logic;
+       phy_rx_er         : in std_logic;
+       phy_rst_n         : out std_logic;
+       phy_tx_en         : out std_logic;
+       phy_tx_data       : out std_logic_vector (3 downto 0);
+       phy_mdio_i        : in  std_logic;
+       phy_mdio_o        : out std_logic;
+       phy_mdio_t        : out std_logic;
+       phy_mdc           : out std_logic
+    );
+  end component axi_ethernetlite;
   signal BOARD_IIC_scl_i : STD_LOGIC;
   signal BOARD_IIC_scl_o : STD_LOGIC;
@@ -418,4 +504,5 @@
   signal BOARD_IIC_sda_o : STD_LOGIC;
   signal BOARD_IIC_sda_t : STD_LOGIC;
+  signal ETH0_LINK_LED_g : STD_LOGIC;
   signal ETH0_MDIO_MDC_mdio_i : STD_LOGIC;
   signal ETH0_MDIO_MDC_mdio_o : STD_LOGIC;
@@ -434,4 +521,63 @@
   signal TRX_spi_ss_o_0 : STD_LOGIC_VECTOR ( 0 to 0 );
   signal TRX_spi_ss_t : STD_LOGIC;
+  signal mw_microblaze_0_Clk_100MHz : STD_LOGIC;
+  signal mw_rst_100M_peripheral_aresetn : STD_LOGIC;
+  signal mw_EUI48_FSM_start : STD_LOGIC;
+  signal mw_EUI48_FSM_run : STD_LOGIC;
+  signal mw_EUI48_data : STD_LOGIC_VECTOR ( 47 downto 0 );
+  signal mw_EUI48_state : STD_LOGIC_VECTOR ( 7 downto 0 );
+  signal mw_EUI48_abort : STD_LOGIC_VECTOR ( 7 downto 0 );
+  signal mw_EUI48_onewire_tri_i : STD_LOGIC;
+  signal mw_EUI48_onewire_tri_o : STD_LOGIC;
+  signal mw_EUI48_onewire_tri_t : STD_LOGIC;
+  signal mw_TRX_rx09_fifo : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal mw_TRX_rx09_fifo_valid : STD_LOGIC;
+  signal mw_TRX_rot09vld : STD_LOGIC;
+  signal mw_TRX_rx09_bs : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal mw_TRX_rx24_fifo : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal mw_TRX_rx24_fifo_valid : STD_LOGIC;
+  signal mw_TRX_rot24vld : STD_LOGIC;
+  signal mw_TRX_rx24_bs : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal mw_premem_rx09_addra_in : STD_LOGIC_VECTOR ( 10 downto 0 );
+  signal mw_premem_rx09_wea_in : STD_LOGIC;
+  signal mw_premem_rx09_dina_in : STD_LOGIC_VECTOR ( 25 downto 0 );
+  signal mw_premem_rx09_addrb_in : STD_LOGIC_VECTOR ( 10 downto 0 );
+  signal mw_premem_rx09_quarterfrm_in : STD_LOGIC_VECTOR ( 2 downto 0 );
+  signal mw_premem_rx24_addra_in : STD_LOGIC_VECTOR ( 10 downto 0 );
+  signal mw_premem_rx24_wea_in : STD_LOGIC;
+  signal mw_premem_rx24_dina_in : STD_LOGIC_VECTOR ( 25 downto 0 );
+  signal mw_premem_rx24_addrb_in : STD_LOGIC_VECTOR ( 10 downto 0 );
+  signal mw_premem_rx24_quarterfrm_in : STD_LOGIC_VECTOR ( 2 downto 0 );
+  signal mw_fft09_aresetn_in : STD_LOGIC;
+  signal mw_fft09_data_tlast_in : STD_LOGIC;
+  signal mw_fft09_data_tready_out : STD_LOGIC;
+  signal mw_fft09_data_tvalid_in : STD_LOGIC;
+  signal mw_fft09_config_tdata_in : STD_LOGIC_VECTOR ( 7 downto 0 );
+  signal mw_fft09_config_tvalid_in : STD_LOGIC;
+  signal mw_fft09_premem_subframe_in : STD_LOGIC_VECTOR ( 1 downto 0 );
+  signal mw_fft24_aresetn_in : STD_LOGIC;
+  signal mw_fft24_data_tlast_in : STD_LOGIC;
+  signal mw_fft24_data_tready_out : STD_LOGIC;
+  signal mw_fft24_data_tvalid_in : STD_LOGIC;
+  signal mw_fft24_config_tdata_in : STD_LOGIC_VECTOR ( 7 downto 0 );
+  signal mw_fft24_config_tvalid_in : STD_LOGIC;
+  signal mw_fft24_premem_subframe_in : STD_LOGIC_VECTOR ( 1 downto 0 );
+  signal mw_postmem_rx_wea_in : STD_LOGIC;
+  signal mw_postmem_rx_addra_in : STD_LOGIC_VECTOR ( 12 downto 0 );
+  signal mw_rotenc_dec_cnt_en : STD_LOGIC;
+  signal mw_rotenc_dec_cnt_up_dwn : STD_LOGIC;
+  signal mw_SCOPE_FSM_GPIO0_Out : STD_LOGIC_VECTOR (31 downto 0);
+  signal mw_SCOPE_FSM_GPIO1_In : STD_LOGIC_VECTOR (31 downto 0);
+  signal mw_SCOPE_FSM_TrigSrc : STD_LOGIC_VECTOR (47 downto 0);
+  signal mw_SCOPE_FSM_Timebase_CE : STD_LOGIC;
+  signal mw_SCOPE_FSM_Timebase_SCLR : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_Rst : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_WrFull : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_RdEmpty : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_WrEn : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_RdEn : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_RdValid : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_rd_rst_busy : STD_LOGIC;
+  signal mw_SCOPE_FSM_FIFO_wr_rst_busy : STD_LOGIC;
   signal qspi_flash_io0_i : STD_LOGIC;
   signal qspi_flash_io0_o : STD_LOGIC;
@@ -449,5 +595,60 @@
   signal qspi_flash_ss_o : STD_LOGIC;
   signal qspi_flash_ss_t : STD_LOGIC;
+  signal el_S_AXI_araddr : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal el_S_AXI_arburst : STD_LOGIC_VECTOR ( 1 downto 0 );
+  signal el_S_AXI_arcache : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_S_AXI_arlen : STD_LOGIC_VECTOR ( 7 downto 0 );
+  signal el_S_AXI_arlock : STD_LOGIC_VECTOR ( 0 to 0 );
+  signal el_S_AXI_arprot : STD_LOGIC_VECTOR ( 2 downto 0 );
+  signal el_S_AXI_arqos : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_S_AXI_arready : STD_LOGIC;
+  signal el_S_AXI_arregion : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_S_AXI_arsize : STD_LOGIC_VECTOR ( 2 downto 0 );
+  signal el_S_AXI_arvalid : STD_LOGIC;
+  signal el_S_AXI_awaddr : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal el_S_AXI_awburst : STD_LOGIC_VECTOR ( 1 downto 0 );
+  signal el_S_AXI_awcache : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_S_AXI_awlen : STD_LOGIC_VECTOR ( 7 downto 0 );
+  signal el_S_AXI_awlock : STD_LOGIC_VECTOR ( 0 to 0 );
+  signal el_S_AXI_awprot : STD_LOGIC_VECTOR ( 2 downto 0 );
+  signal el_S_AXI_awqos : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_S_AXI_awready : STD_LOGIC;
+  signal el_S_AXI_awregion : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_S_AXI_awsize : STD_LOGIC_VECTOR ( 2 downto 0 );
+  signal el_S_AXI_awvalid : STD_LOGIC;
+  signal el_S_AXI_bready : STD_LOGIC;
+  signal el_S_AXI_bresp : STD_LOGIC_VECTOR ( 1 downto 0 );
+  signal el_S_AXI_bvalid : STD_LOGIC;
+  signal el_S_AXI_rdata : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal el_S_AXI_rlast : STD_LOGIC;
+  signal el_S_AXI_rready : STD_LOGIC;
+  signal el_S_AXI_rresp : STD_LOGIC_VECTOR ( 1 downto 0 );
+  signal el_S_AXI_rvalid : STD_LOGIC;
+  signal el_S_AXI_wdata : STD_LOGIC_VECTOR ( 31 downto 0 );
+  signal el_S_AXI_wlast : STD_LOGIC;
+  signal el_S_AXI_wready : STD_LOGIC;
+  signal el_S_AXI_wstrb : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_S_AXI_wvalid : STD_LOGIC;
+  signal el_ip2intc_irpt : STD_LOGIC;
+  signal el_phy_col : STD_LOGIC;
+  signal el_phy_crs : STD_LOGIC;
+  signal el_phy_dv : STD_LOGIC;
+  signal el_phy_mdc : STD_LOGIC;
+  signal el_phy_mdio_i : STD_LOGIC;
+  signal el_phy_mdio_o : STD_LOGIC;
+  signal el_phy_mdio_t : STD_LOGIC;
+  signal el_phy_rst_n : STD_LOGIC;
+  signal el_phy_rx_clk : STD_LOGIC;
+  signal el_phy_rx_data : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_phy_rx_er : STD_LOGIC;
+  signal el_phy_tx_clk : STD_LOGIC;
+  signal el_phy_tx_data : STD_LOGIC_VECTOR ( 3 downto 0 );
+  signal el_phy_tx_en : STD_LOGIC;
 begin
+ETH0_LINK_LED_0: component IBUF
+     port map (
+      I                 => ETH0_LINK_LED,
+      O                 => ETH0_LINK_LED_g
+    );
 BOARD_IIC_scl_iobuf: component IOBUF
      port map (
@@ -499,4 +700,158 @@
       T => TRX_spi_ss_t
     );
+EUI_onewire_iobuf_0: component IOBUF
+     port map (
+      I =>  mw_EUI48_onewire_tri_o,
+      IO => EUI48_onewire_io,
+      O =>  mw_EUI48_onewire_tri_i,
+      T =>  mw_EUI48_onewire_tri_t
+    );
+rotenc_decoder_i: component rotenc_decoder
+     port map (
+      resetn            => mw_rst_100M_peripheral_aresetn,
+      clk               => mw_microblaze_0_Clk_100MHz,
+      rotenc_I          => BOARD_ROTENC_I,
+      rotenc_Q          => BOARD_ROTENC_Q,
+      cnt_up_dwn        => mw_rotenc_dec_cnt_up_dwn,
+      cnt_en            => mw_rotenc_dec_cnt_en
+    );
+auto_LVDS_rotate_i: component auto_LVDS_rotate
+    port map (
+      resetn            => mw_rst_100M_peripheral_aresetn,
+      clk               => mw_microblaze_0_Clk_100MHz,
+      LVDS09            => mw_TRX_rx09_fifo,
+      LVDS09_valid      => mw_TRX_rx09_fifo_valid,
+      LVDS24            => mw_TRX_rx24_fifo,
+      LVDS24_valid      => mw_TRX_rx24_fifo_valid,
+      rot09q            => mw_TRX_rx09_bs,
+      rot09vld          => mw_TRX_rot09vld,
+      rot24q            => mw_TRX_rx24_bs,
+      rot24vld          => mw_TRX_rot24vld
+    );
+FFT_controller_i: component FFT_controller
+    port map (
+      resetn                => mw_rst_100M_peripheral_aresetn,
+      clk                   => mw_microblaze_0_Clk_100MHz,
+      rx09_bs_32bits        => mw_TRX_rx09_bs,
+      rx09_bs_32bits_vld    => mw_TRX_rot09vld,
+      rx24_bs_32bits        => mw_TRX_rx24_bs,
+      rx24_bs_32bits_vld    => mw_TRX_rot24vld,
+      PreMem09_addra        => mw_premem_rx09_addra_in,
+      PreMem09_wea          => mw_premem_rx09_wea_in,
+      PreMem09_dina         => mw_premem_rx09_dina_in,
+      PreMem09_addrb        => mw_premem_rx09_addrb_in,
+      PreMem09_quarterfrm   => mw_premem_rx09_quarterfrm_in,
+      PreMem24_addra        => mw_premem_rx24_addra_in,
+      PreMem24_wea          => mw_premem_rx24_wea_in,
+      PreMem24_dina         => mw_premem_rx24_dina_in,
+      PreMem24_addrb        => mw_premem_rx24_addrb_in,
+      PreMem24_quarterfrm   => mw_premem_rx24_quarterfrm_in,
+      XFFT09_aresetn        => mw_fft09_aresetn_in,
+      XFFT09_s_data_tlast   => mw_fft09_data_tlast_in,
+      XFFT09_s_data_tready  => mw_fft09_data_tready_out,
+      XFFT09_s_data_tvalid  => mw_fft09_data_tvalid_in,
+      XFFT09_s_conf_tdata   => mw_fft09_config_tdata_in,
+      XFFT09_s_conf_tvalid  => mw_fft09_config_tvalid_in,
+      XFFT24_aresetn        => mw_fft24_aresetn_in,
+      XFFT24_s_data_tlast   => mw_fft24_data_tlast_in,
+      XFFT24_s_data_tready  => mw_fft24_data_tready_out,
+      XFFT24_s_data_tvalid  => mw_fft24_data_tvalid_in,
+      XFFT24_s_conf_tdata   => mw_fft24_config_tdata_in,
+      XFFT24_s_conf_tvalid  => mw_fft24_config_tvalid_in
+    );
+EUI48_FSM_i: component EUI48_FSM
+    port map (
+      resetn                => mw_rst_100M_peripheral_aresetn,
+      clk                   => mw_microblaze_0_Clk_100MHz,
+      EUI48_onewire_tri_i   => mw_EUI48_onewire_tri_i,
+      EUI48_onewire_tri_o   => mw_EUI48_onewire_tri_o,
+      EUI48_onewire_tri_t   => mw_EUI48_onewire_tri_t,
+      EUI48_FSM_start       => mw_EUI48_FSM_start,
+      EUI48_FSM_run         => mw_EUI48_FSM_run,
+      EUI48_data            => mw_EUI48_data(47 downto 0),
+      EUI48_state           => mw_EUI48_state,
+      EUI48_abort           => mw_EUI48_abort
+    );
+SCOPE_FSM_i: component SCOPE_FSM
+    port map (
+      resetn                        => mw_rst_100M_peripheral_aresetn,
+      clk                           => mw_microblaze_0_Clk_100MHz,
+      SCOPE_FSM_GPIO0_Out           => mw_SCOPE_FSM_GPIO0_Out,
+      SCOPE_FSM_GPIO1_In            => mw_SCOPE_FSM_GPIO1_In,
+      SCOPE_FSM_TrigSrc             => mw_SCOPE_FSM_TrigSrc,
+      SCOPE_FSM_Timebase_CE         => mw_SCOPE_FSM_Timebase_CE,
+      SCOPE_FSM_Timebase_SCLR       => mw_SCOPE_FSM_Timebase_SCLR,
+      SCOPE_FSM_FIFO_Rstn           => mw_SCOPE_FSM_FIFO_Rst,
+      SCOPE_FSM_FIFO_wr_rst_busy    => mw_SCOPE_FSM_FIFO_wr_rst_busy,
+      SCOPE_FSM_FIFO_rd_rst_busy    => mw_SCOPE_FSM_FIFO_rd_rst_busy,
+      SCOPE_FSM_FIFO_WrFull         => mw_SCOPE_FSM_FIFO_WrFull,
+      SCOPE_FSM_FIFO_RdEmpty        => mw_SCOPE_FSM_FIFO_RdEmpty,
+      SCOPE_FSM_FIFO_WrEn           => mw_SCOPE_FSM_FIFO_WrEn,
+      SCOPE_FSM_FIFO_RdEn           => mw_SCOPE_FSM_FIFO_RdEn,
+      SCOPE_FSM_FIFO_RdValid        => mw_SCOPE_FSM_FIFO_RdValid
+    );
+dut_axiethernetlite_i: component axi_ethernetlite
+    port map (
+       s_axi_aclk           => mw_microblaze_0_Clk_100MHz,      --      in  std_logic;
+       s_axi_aresetn        => mw_rst_100M_peripheral_aresetn,  --      in  std_logic;
+       ip2intc_irpt         => el_ip2intc_irpt,                 --      out std_logic;
+
+--   -- axi slave burst Interface
+--   -- axi write address Channel Signals
+       s_axi_awid           => "0000",                          --      in  std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_awaddr         => el_S_AXI_awaddr,                 --      in  std_logic_vector(12 downto 0); -- (C_S_AXI_ADDR_WIDTH-1 downto 0);
+       s_axi_awlen          => el_S_AXI_awlen,                  --      in  std_logic_vector(7 downto 0);
+       s_axi_awsize         => el_S_AXI_awsize,                 --      in  std_logic_vector(2 downto 0);
+       s_axi_awburst        => el_S_AXI_awburst,                --      in  std_logic_vector(1 downto 0);
+       s_axi_awcache        => el_S_AXI_awcache,                --      in  std_logic_vector(3 downto 0);
+       s_axi_awvalid        => el_S_AXI_awvalid,                --      in  std_logic;
+       s_axi_awready        => el_S_AXI_awready,                --      out std_logic;
+
+--   -- axi write data Channel Signals
+       s_axi_wdata          => el_S_AXI_wdata,                  --      in  std_logic_vector(31 downto 0);    -- (C_S_AXI_DATA_WIDTH-1 downto 0);
+       s_axi_wstrb          => el_S_AXI_wstrb,                  --      in  std_logic_vector(3 downto 0);     -- (((C_S_AXI_DATA_WIDTH/8)-1) downto 0);
+       s_axi_wlast          => el_S_AXI_wlast,                  --      in  std_logic;
+       s_axi_wvalid         => el_S_AXI_wvalid,                 --      in  std_logic;
+       s_axi_wready         => el_S_AXI_wready,                 --      out std_logic;
+
+--   -- axi write response Channel Signals
+     --s_axi_bid            => (none),                          --      out std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_bresp          => el_S_AXI_bresp,                  --      out std_logic_vector(1 downto 0);
+       s_axi_bvalid         => el_S_AXI_bvalid,                 --      out std_logic;
+       s_axi_bready         => el_S_AXI_bready,                 --      in  std_logic;
+--   -- axi read address Channel Signals
+       s_axi_arid           => "0000",                          --      in  std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_araddr         => el_S_AXI_araddr,                 --      in  std_logic_vector(12 downto 0); -- (C_S_AXI_ADDR_WIDTH-1 downto 0);
+       s_axi_arlen          => el_S_AXI_arlen,                  --      in  std_logic_vector(7 downto 0);
+       s_axi_arsize         => el_S_AXI_arsize,                 --      in  std_logic_vector(2 downto 0);
+       s_axi_arburst        => el_S_AXI_arburst,                --      in  std_logic_vector(1 downto 0);
+       s_axi_arcache        => el_S_AXI_arcache,                --      in  std_logic_vector(3 downto 0);
+       s_axi_arvalid        => el_S_AXI_arvalid,                --      in  std_logic;
+       s_axi_arready        => el_S_AXI_arready,                --      out std_logic;
+
+--   -- axi read data Channel Signals
+     --s_axi_rid            => (none),                          --      out std_logic_vector(C_S_AXI_ID_WIDTH-1 downto 0);
+       s_axi_rdata          => el_S_AXI_rdata,                  --      out std_logic_vector(31 downto 0); -- (C_S_AXI_DATA_WIDTH-1 downto 0);
+       s_axi_rresp          => el_S_AXI_rresp,                  --      out std_logic_vector(1 downto 0);
+       s_axi_rlast          => el_S_AXI_rlast,                  --      out std_logic;
+       s_axi_rvalid         => el_S_AXI_rvalid,                 --      out std_logic;
+       s_axi_rready         => el_S_AXI_rready,                 --      in  std_logic;
+
+--   -- Ethernet Interface
+       phy_tx_clk           => el_phy_tx_clk,                   --      in std_logic;
+       phy_rx_clk           => el_phy_rx_clk,                   --      in std_logic;
+       phy_crs              => el_phy_crs,                      --      in std_logic;
+       phy_dv               => el_phy_dv,                       --      in std_logic;
+       phy_rx_data          => el_phy_rx_data,                  --      in std_logic_vector (3 downto 0);
+       phy_col              => el_phy_col,                      --      in std_logic;
+       phy_rx_er            => el_phy_rx_er,                    --      in std_logic;
+       phy_rst_n            => el_phy_rst_n,                    --      out std_logic;
+       phy_tx_en            => el_phy_tx_en,                    --      out std_logic;
+       phy_tx_data          => el_phy_tx_data,                  --      out std_logic_vector (3 downto 0);
+       phy_mdio_i           => el_phy_mdio_i,                   --      in  std_logic;
+       phy_mdio_o           => el_phy_mdio_o,                   --      out std_logic;
+       phy_mdio_t           => el_phy_mdio_t,                   --      out std_logic;
+       phy_mdc              => el_phy_mdc                       --      out std_logic
+    );    
 msys_i: component msys
      port map (
@@ -538,9 +893,9 @@
       ETH0_MDIO_MDC_mdio_o => ETH0_MDIO_MDC_mdio_o,
       ETH0_MDIO_MDC_mdio_t => ETH0_MDIO_MDC_mdio_t,
-      EUI48_FSM_run => EUI48_FSM_run,
-      EUI48_FSM_start(0) => EUI48_FSM_start(0),
-      EUI48_abort(7 downto 0) => EUI48_abort(7 downto 0),
-      EUI48_data(47 downto 0) => EUI48_data(47 downto 0),
-      EUI48_state(7 downto 0) => EUI48_state(7 downto 0),
+      EUI48_FSM_run => mw_EUI48_FSM_run,
+      EUI48_FSM_start(0) => mw_EUI48_FSM_start,
+      EUI48_abort(7 downto 0) => mw_EUI48_abort(7 downto 0),
+      EUI48_data(47 downto 0) => mw_EUI48_data(47 downto 0),
+      EUI48_state(7 downto 0) => mw_EUI48_state(7 downto 0),
       FPGA_IO => FPGA_IO,
       LCD_BL(0) => LCD_BL(0),
@@ -556,17 +911,17 @@
       RMII_PHY_M_0_tx_en => RMII_PHY_M_0_tx_en,
       RMII_PHY_M_0_txd(1 downto 0) => RMII_PHY_M_0_txd(1 downto 0),
-      SCOPE_FSM_FIFO_RdEmpty => SCOPE_FSM_FIFO_RdEmpty,
-      SCOPE_FSM_FIFO_RdEn => SCOPE_FSM_FIFO_RdEn,
-      SCOPE_FSM_FIFO_RdValid => SCOPE_FSM_FIFO_RdValid,
-      SCOPE_FSM_FIFO_Rst => SCOPE_FSM_FIFO_Rst,
-      SCOPE_FSM_FIFO_WrEn => SCOPE_FSM_FIFO_WrEn,
-      SCOPE_FSM_FIFO_WrFull => SCOPE_FSM_FIFO_WrFull,
-      SCOPE_FSM_FIFO_rd_rst_busy => SCOPE_FSM_FIFO_rd_rst_busy,
-      SCOPE_FSM_FIFO_wr_rst_busy => SCOPE_FSM_FIFO_wr_rst_busy,
-      SCOPE_FSM_GPIO0_Out(31 downto 0) => SCOPE_FSM_GPIO0_Out(31 downto 0),
-      SCOPE_FSM_GPIO1_In(31 downto 0) => SCOPE_FSM_GPIO1_In(31 downto 0),
-      SCOPE_FSM_Timebase_CE => SCOPE_FSM_Timebase_CE,
-      SCOPE_FSM_Timebase_SCLR => SCOPE_FSM_Timebase_SCLR,
-      SCOPE_FSM_TrigSrc(47 downto 0) => SCOPE_FSM_TrigSrc(47 downto 0),
+      SCOPE_FSM_FIFO_RdEmpty => mw_SCOPE_FSM_FIFO_RdEmpty,
+      SCOPE_FSM_FIFO_RdEn => mw_SCOPE_FSM_FIFO_RdEn,
+      SCOPE_FSM_FIFO_RdValid => mw_SCOPE_FSM_FIFO_RdValid,
+      SCOPE_FSM_FIFO_Rst => mw_SCOPE_FSM_FIFO_Rst,
+      SCOPE_FSM_FIFO_WrEn => mw_SCOPE_FSM_FIFO_WrEn,
+      SCOPE_FSM_FIFO_WrFull => mw_SCOPE_FSM_FIFO_WrFull,
+      SCOPE_FSM_FIFO_rd_rst_busy => mw_SCOPE_FSM_FIFO_rd_rst_busy,
+      SCOPE_FSM_FIFO_wr_rst_busy => mw_SCOPE_FSM_FIFO_wr_rst_busy,
+      SCOPE_FSM_GPIO0_Out(31 downto 0) => mw_SCOPE_FSM_GPIO0_Out(31 downto 0),
+      SCOPE_FSM_GPIO1_In(31 downto 0) => mw_SCOPE_FSM_GPIO1_In(31 downto 0),
+      SCOPE_FSM_Timebase_CE => mw_SCOPE_FSM_Timebase_CE,
+      SCOPE_FSM_Timebase_SCLR => mw_SCOPE_FSM_Timebase_SCLR,
+      SCOPE_FSM_TrigSrc(47 downto 0) => mw_SCOPE_FSM_TrigSrc(47 downto 0),
       TRX_PLL_clk_25MHz_N(0) => TRX_PLL_clk_25MHz_N(0),
       TRX_PLL_clk_25MHz_P(0) => TRX_PLL_clk_25MHz_P(0),
@@ -575,8 +930,8 @@
       TRX_reset(0) => TRX_reset(0),
       TRX_rfx_mode(0) => TRX_rfx_mode(0),
-      TRX_rx09_fifo_o(31 downto 0) => TRX_rx09_fifo_o(31 downto 0),
-      TRX_rx09_fifo_valid_o => TRX_rx09_fifo_valid_o,
-      TRX_rx24_fifo_o(31 downto 0) => TRX_rx24_fifo_o(31 downto 0),
-      TRX_rx24_fifo_valid_o => TRX_rx24_fifo_valid_o,
+      TRX_rx09_fifo_o(31 downto 0) => mw_TRX_rx09_fifo(31 downto 0),
+      TRX_rx09_fifo_valid_o => mw_TRX_rx09_fifo_valid,
+      TRX_rx24_fifo_o(31 downto 0) => mw_TRX_rx24_fifo(31 downto 0),
+      TRX_rx24_fifo_valid_o => mw_TRX_rx24_fifo_valid,
       TRX_rx_clk_64MHz_clk_n => TRX_rx_clk_64MHz_clk_n,
       TRX_rx_clk_64MHz_clk_p => TRX_rx_clk_64MHz_clk_p,
@@ -651,5 +1006,5 @@
       el_phy_dv => el_phy_dv,
       el_phy_mdc => el_phy_mdc,
-      el_phy_mdio_i(0) => el_phy_mdio_i(0),
+      el_phy_mdio_i(0) => el_phy_mdio_i,
       el_phy_mdio_o => el_phy_mdio_o,
       el_phy_mdio_t => el_phy_mdio_t,
@@ -661,28 +1016,28 @@
       el_phy_tx_data(3 downto 0) => el_phy_tx_data(3 downto 0),
       el_phy_tx_en => el_phy_tx_en,
-      fft09_aresetn_in => fft09_aresetn_in,
-      fft09_config_tdata_in(7 downto 0) => fft09_config_tdata_in(7 downto 0),
-      fft09_config_tvalid_in => fft09_config_tvalid_in,
-      fft09_data_tlast_in => fft09_data_tlast_in,
-      fft09_data_tready_out => fft09_data_tready_out,
-      fft09_data_tvalid_in => fft09_data_tvalid_in,
-      fft24_aresetn_in => fft24_aresetn_in,
-      fft24_config_tdata_in(7 downto 0) => fft24_config_tdata_in(7 downto 0),
-      fft24_config_tvalid_in => fft24_config_tvalid_in,
-      fft24_data_tlast_in => fft24_data_tlast_in,
-      fft24_data_tready_out => fft24_data_tready_out,
-      fft24_data_tvalid_in => fft24_data_tvalid_in,
-      microblaze_0_Clk_100MHz_o => microblaze_0_Clk_100MHz_o,
+      fft09_aresetn_in => mw_fft09_aresetn_in,
+      fft09_config_tdata_in(7 downto 0) => mw_fft09_config_tdata_in(7 downto 0),
+      fft09_config_tvalid_in => mw_fft09_config_tvalid_in,
+      fft09_data_tlast_in => mw_fft09_data_tlast_in,
+      fft09_data_tready_out => mw_fft09_data_tready_out,
+      fft09_data_tvalid_in => mw_fft09_data_tvalid_in,
+      fft24_aresetn_in => mw_fft24_aresetn_in,
+      fft24_config_tdata_in(7 downto 0) => mw_fft24_config_tdata_in(7 downto 0),
+      fft24_config_tvalid_in => mw_fft24_config_tvalid_in,
+      fft24_data_tlast_in => mw_fft24_data_tlast_in,
+      fft24_data_tready_out => mw_fft24_data_tready_out,
+      fft24_data_tvalid_in => mw_fft24_data_tvalid_in,
+      microblaze_0_Clk_100MHz_o => mw_microblaze_0_Clk_100MHz,
       phy_rst_n => phy_rst_n,
-      premem_rx09_addra_in(10 downto 0) => premem_rx09_addra_in(10 downto 0),
-      premem_rx09_addrb_in(10 downto 0) => premem_rx09_addrb_in(10 downto 0),
-      premem_rx09_dina_in(25 downto 0) => premem_rx09_dina_in(25 downto 0),
-      premem_rx09_quarterfrm_in(2 downto 0) => premem_rx09_quarterfrm_in(2 downto 0),
-      premem_rx09_wea_in(0) => premem_rx09_wea_in(0),
-      premem_rx24_addra_in(10 downto 0) => premem_rx24_addra_in(10 downto 0),
-      premem_rx24_addrb_in(10 downto 0) => premem_rx24_addrb_in(10 downto 0),
-      premem_rx24_dina_in(25 downto 0) => premem_rx24_dina_in(25 downto 0),
-      premem_rx24_quarterfrm_in(2 downto 0) => premem_rx24_quarterfrm_in(2 downto 0),
-      premem_rx24_wea_in(0) => premem_rx24_wea_in(0),
+      premem_rx09_addra_in(10 downto 0) => mw_premem_rx09_addra_in(10 downto 0),
+      premem_rx09_addrb_in(10 downto 0) => mw_premem_rx09_addrb_in(10 downto 0),
+      premem_rx09_dina_in(25 downto 0) => mw_premem_rx09_dina_in(25 downto 0),
+      premem_rx09_quarterfrm_in(2 downto 0) => mw_premem_rx09_quarterfrm_in(2 downto 0),
+      premem_rx09_wea_in(0) => mw_premem_rx09_wea_in,
+      premem_rx24_addra_in(10 downto 0) => mw_premem_rx24_addra_in(10 downto 0),
+      premem_rx24_addrb_in(10 downto 0) => mw_premem_rx24_addrb_in(10 downto 0),
+      premem_rx24_dina_in(25 downto 0) => mw_premem_rx24_dina_in(25 downto 0),
+      premem_rx24_quarterfrm_in(2 downto 0) => mw_premem_rx24_quarterfrm_in(2 downto 0),
+      premem_rx24_wea_in(0) => mw_premem_rx24_wea_in,
       qspi_flash_io0_i => qspi_flash_io0_i,
       qspi_flash_io0_o => qspi_flash_io0_o,
@@ -701,7 +1056,7 @@
       qspi_flash_ss_t => qspi_flash_ss_t,
       reset => reset,
-      rotenc_dec_cnt_en => rotenc_dec_cnt_en,
-      rotenc_dec_cnt_up_dwn => rotenc_dec_cnt_up_dwn,
-      rst_100M_peripheral_aresetn(0) => rst_100M_peripheral_aresetn(0)
+      rotenc_dec_cnt_en => mw_rotenc_dec_cnt_en,
+      rotenc_dec_cnt_up_dwn => mw_rotenc_dec_cnt_up_dwn,
+      rst_100M_peripheral_aresetn(0) => mw_rst_100M_peripheral_aresetn
     );
 qspi_flash_io0_iobuf: component IOBUF
